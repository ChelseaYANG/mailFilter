{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"TrashMailFilter","body":"# ﻿TrashMailFilter\r\n基于贝叶斯推断的垃圾邮件过滤器\r\n\r\n# Version 1.0\r\n\r\n# 原理简介:\r\n基于贝叶斯推断的垃圾邮件过滤器。通过8000封正常邮件和8000封垃圾邮件“训练”过滤器:\r\n解析所有邮件，提取每一个词,然后，计算每个词语在正常邮件和垃圾邮件中的出现频率。\r\n\r\n1. 当收到一封未知邮件时，在不知道的前提下，我们假定它是垃圾邮件和正常邮件的概率各\r\n   为50%，p(s) = p(n) = 50%\r\n\r\n2. 解析该邮件，提取每个词，计算该词的p(s|w)，也就是受该词影响，该邮件是垃圾邮件的概率\r\n                     p(sw)             p(w|s)p(s)\r\n\tp(s|w) = -----------  =   ----------------------\r\n\t              p(w)        p(s)p(w|s) + p(n)p(w|n)\r\n\r\n3. 提取该邮件中p(s|w)最高的15个词，计算联合概率。\r\n`\r\n`                     p(s|w1)p(s|w2)...p(s|w15)\r\n\tp = ---------------------------------------------------------------\r\n\t\tp(s|w1)p(s|w2)...p(s|w15) + (1-p(s|w1))(1-p(s|w2)...(1-p(s|w15)))\t\r\n\r\n4. 设定阈值 p > 0.9 :垃圾邮件\r\n           p < 0.9 :正常邮件\t\r\n\r\n_注:如果新收到的邮件中有的词在史料库中还没出现过，就假定p(s|w) = 0.4_\r\n\r\n\r\n# 使用：\r\n\t解压data.rar到当前文件夹(不要改名)\r\n\t启动第一个终端模拟邮件服务器\r\n\t\tcd mailFilter\r\n\t\tpython server.py\r\n\t等到出现\"Waiting for clients...\"启动第二个终端模拟客户端\r\n\t\tcd mailFilter\r\n\t\tpython client.py\r\n\r\n","tagline":"TrashMailFilter"}